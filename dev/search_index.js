var documenterSearchIndex = {"docs":
[{"location":"#Emerald.jl","page":"Home","title":"Emerald.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Refactored CliMA Land model.","category":"page"},{"location":"API/#Emerald","page":"API","title":"Emerald","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = Emerald","category":"page"},{"location":"API/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"API/#Environment","page":"API","title":"Environment","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractSoilVC\nBrooksCorey\nVanGenuchten\nSoilAir","category":"page"},{"location":"API/#Emerald.AbstractSoilVC","page":"API","title":"Emerald.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT<:AbstractFloat}\n\nHierachy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"API/#Emerald.BrooksCorey","page":"API","title":"Emerald.BrooksCorey","text":"struct BrooksCorey{FT<:AbstractFloat} <: Emerald.AbstractSoilVC{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nTYPE::String\nSoil type\nB::AbstractFloat\nSoil b\nΨ_SAT::AbstractFloat\nPotential at saturation [MPa]\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\nExamples\n\nbc = BrooksCorey{FT}(\"Test\", FT(5), FT(2), FT(0.5), FT(0.1));\nbc = BrooksCorey{FT}(VanGenuchten{FT}(\"Loam\"));\n\n\n\n\n\n","category":"type"},{"location":"API/#Emerald.VanGenuchten","page":"API","title":"Emerald.VanGenuchten","text":"struct VanGenuchten{FT<:AbstractFloat} <: Emerald.AbstractSoilVC{FT<:AbstractFloat}\n\nvan Genuchten soil parameters\n\nFields\n\nTYPE::String\nSoil type\nΑ::AbstractFloat\nSoil α is related to the inverse of the air entry suction, α > 0\nN::AbstractFloat\nSoil n is Measure of the pore-size distribution\nM::AbstractFloat\nSoil m = 1 - 1/n\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\nExamples\n\nvg = VanGenuchten{FT}(\"Loam\");\nvg = VanGenuchten{FT}(\"Silt\");\nvg = VanGenuchten{FT}(\"Test\", FT(100), FT(2), FT(0.5), FT(0.1));\n\n\n\n\n\n","category":"type"},{"location":"API/#Emerald.SoilAir","page":"API","title":"Emerald.SoilAir","text":"mutable struct SoilAir{FT<:AbstractFloat}\n\nStruct that contains environmental conditions, such as soil moisture and atmospheric vapor pressure. Note that this structure is designed to be containers to interact with other CliMA modules and to     prescribe values.\n\nFields\n\nAREA::AbstractFloat\nTotal area of the soil/air interface [m²]\nCOLOR::Int64\nSoil color class used for soil albedo calculations\nN_AIR::Int64\nNumber of air layers\nN_SOIL::Int64\nNumber of soil layers\nVC::Union{Array{BrooksCorey{FT}, 1}, Array{VanGenuchten{FT}, 1}} where FT<:AbstractFloat\nSoil moisture retention curve\nZ_AIR::Vector{FT} where FT<:AbstractFloat\nZ profile for air [m]\nZ_SOIL::Vector{FT} where FT<:AbstractFloat\nZ profile for soil [m]\nΔZ_AIR::Vector{FT} where FT<:AbstractFloat\nΔZ profile for air [m]\nΔZ_SOIL::Vector{FT} where FT<:AbstractFloat\nΔZ profile for soil [m]\np_CO₂::Vector{FT} where FT<:AbstractFloat\nCO₂ partial pressure at different air layers [Pa]\np_H₂O::Vector{FT} where FT<:AbstractFloat\nH₂O partial pressure at different air layers [Pa]\nt_air::Vector{FT} where FT<:AbstractFloat\nTemperature at different air layers [K]\nt_soil::Vector{FT} where FT<:AbstractFloat\nTemperature at different soil layers [K]\nwind::Vector{FT} where FT<:AbstractFloat\nWind speed (total) [m s⁻¹]\nwind_z::Vector{FT} where FT<:AbstractFloat\nWind speed (vertical) [m s⁻¹]\nθ::Vector{FT} where FT<:AbstractFloat\nSoil water content at different soil layers [m³ m⁻³]\np_H₂O_sat::Vector{FT} where FT<:AbstractFloat\nSaturated vapor pressure at different air layers [Pa]\nvpd::Vector{FT} where FT<:AbstractFloat\nVapor pressure deficit at different air layers [Pa]\nψ::Vector{FT} where FT<:AbstractFloat\nSoil water potential at different soil layers [MPa]\n\nExamples\n\n;\n\n\n\n\n\n","category":"type"},{"location":"API/#Leaf","page":"API","title":"Leaf","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Leaf\nLeafBiophysics","category":"page"},{"location":"API/#Emerald.Leaf","page":"API","title":"Emerald.Leaf","text":"mutable struct Leaf{FT<:AbstractFloat}\n\nStruct that contains leaf traits such as plant photosynthesis, hydraulics, and biophysics.\n\nFields\n\nBIO_PHYSICS::Emerald.LeafBiophysics\nBiophysical parameter structure\nt::AbstractFloat\nCurrent leaf temperature\n_t::AbstractFloat\nLast leaf temperature. If different from t, then make temperature correction\n\n\n\nExamples\n\nleaf = Leaf{FT}();\nleaf = Leaf{FT}(collect(FT,400:5:2500.1));\nleaf = Leaf{FT}(collect(FT,400:5:2500.1); opti=Emerald.OPTI_2021);\nleaf = Leaf{FT}(WaveLengthSet{FT}());\nleaf = Leaf{FT}(WaveLengthSet{FT}(); opti=Emerald.OPTI_2021);\n\n\n\n\n\n","category":"type"},{"location":"API/#Emerald.LeafBiophysics","page":"API","title":"Emerald.LeafBiophysics","text":"mutable struct LeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nFQE::AbstractFloat\nLeaf fluorescence quantum efficiency (Fo standard)\nLMA::AbstractFloat\nDry matter content (dry leaf mass per unit area) [g cm⁻²]\nCBC::AbstractFloat\nCarbon-based constituents in LMA [g cm⁻²]\nPRO::AbstractFloat\nProtein content in LMA (PRO = LMA - CBC) [g cm⁻²]\nK_ANT::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of anthocynanin [-]\nK_CAB::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of chlorophyll a and b [-]\nK_CAR_V::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of violaxanthin carotenoid [-]\nK_CAR_Z::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of zeaxanthin carotenoid [-]\nK_CBC::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of carbon-based constituents [-]\nK_H₂O::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of water [-]\nK_LMA::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of dry matter [-]\nK_PRO::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of protein [-]\nK_PS::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of PS I and II [-]\nK_SENES::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of senescent material [-]\nMESOPHYLL_N::AbstractFloat\nLeaf mesophyll structural parameter that describes mesophyll reflection and transmittance\nNDUB::Int64\nDoubling adding layers\nNR::Vector{FT} where FT<:AbstractFloat\nRefractive index [-]\nant::AbstractFloat\nAnthocynanin content [ug cm⁻²]\ncab::AbstractFloat\nChlorophyll a and b content [ug cm⁻²]\ncar::AbstractFloat\nCarotenoid content [ug cm⁻²]\nf_senes::AbstractFloat\nSenescent material (brown pigments) fraction [-]\nf_zeax::Any\nZeaxanthin fraction in Carotenoid (1=all Zeaxanthin, 0=all Violaxanthin) [-]\nl_H₂O::AbstractFloat\nEquivalent water thickness [cm]\nmat_b::Matrix{FT} where FT<:AbstractFloat\nFluorescence excitation matrix backwards [-]\nmat_f::Matrix{FT} where FT<:AbstractFloat\nFluorescence excitation matrix forwards [-]\nα_cab::Vector{FT} where FT<:AbstractFloat\nRelative absorption by Chlorophyll [-]\nα_cabcar::Vector{FT} where FT<:AbstractFloat\nRelative absorption by Chlorophyll+Carotenoid [-]\nρ_LW::AbstractFloat\nBroadband thermal reflectance, related to blackbody emittance [-]\nρ_SW::Vector{FT} where FT<:AbstractFloat\nShortwave leaf reflectance [-]\nτ_LW::AbstractFloat\nBroadband thermal transmission, related to blackbody emittance [-]\nτ_SW::Vector{FT} where FT<:AbstractFloat\nShortwave leaf transmission [-]\n_k_all::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of all materials\n_α_SW::Vector{FT} where FT<:AbstractFloat\nShortwave absorption, 1 .- ρSW .- τSW  [-]\n\n\n\nExamples\n\nlbio = Emerald.LeafBiophysics{FT}();\nlbio = Emerald.LeafBiophysics{FT}(collect(FT,400:5:2500.1));\nlbio = Emerald.LeafBiophysics{FT}(collect(FT,400:5:2500.1); opti=Emerald.OPTI_2021);\nlbio = Emerald.LeafBiophysics{FT}(WaveLengthSet{FT}());\nlbio = Emerald.LeafBiophysics{FT}(WaveLengthSet{FT}(); opti=Emerald.OPTI_2021);\n\n\n\n\n\n","category":"type"},{"location":"API/#Radiation","page":"API","title":"Radiation","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"WaveLengthSet","category":"page"},{"location":"API/#Emerald.WaveLengthSet","page":"API","title":"Emerald.WaveLengthSet","text":"mutable struct WaveLengthSet{FT<:AbstractFloat}\n\nStructure that stores wave length information.\n\nIΛ_NIR::Vector{Int64}\nIndicies of Λ_NIR in Λ\nIΛ_PAR::Vector{Int64}\nIndicies of Λ_PAR in Λ\nIΛ_SIF::Vector{Int64}\nIndicies of Λ_SIF in Λ\nIΛ_SIFE::Vector{Int64}\nIndicies of Λ_SIFE in Λ\nNΛ::Int64\nNumber of wavelength bins\nNΛ_PAR::Int64\nNumber of wavelength bins for PAR\nNΛ_SIF::Int64\nNumber of wavelength bins for SIF\nNΛ_SIFE::Int64\nNumber of wavelength bins for SIF excitation\nWL_NIR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for NIR [nm]\nWL_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for PAR [nm]\nWL_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF emission [nm]\nWL_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF excitation [nm]\nSΛ::Vector{FT} where FT<:AbstractFloat\nStandard wavelength (boundaries) [nm]\nΔΛ::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength [nm]\nΔΛ_PAR::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for PAR [nm]\nΔΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for SIF excitation [nm]\nΛ::Vector{FT} where FT<:AbstractFloat\nWavelength (bins) [nm]\nΛ_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength bins for PAR [nm]\nΛ_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF [nm]\nΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF excitation [nm]\n\n\n\nExamples\n\nwls = WaveLengthSet{FT}();\nwls = WaveLengthSet{FT}(collect(FT,400:5:2500));\nwls = WaveLengthSet{FT}(collect(FT,400:5:2500); opti=Emerald.OPTI_2017);\n\n\n\n\n\n","category":"type"},{"location":"API/#Folium","page":"API","title":"Folium","text":"","category":"section"},{"location":"API/#Soli","page":"API","title":"Soli","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Soli.soil_ψ_25\nSoli.soil_ψ_25(vc::Emerald.BrooksCorey{FT}, θ::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#Emerald.Soli.soil_ψ_25","page":"API","title":"Emerald.Soli.soil_ψ_25","text":"This function calculates soil metric potential from soil retention curve type and soil volumetric water potential. The supported methods are\n\nsoil_ψ_25(vc, θ)\n\ndefined at /home/runner/work/Emerald.jl/Emerald.jl/src/Soli.jl:76.\n\nsoil_ψ_25(vc, θ)\n\ndefined at /home/runner/work/Emerald.jl/Emerald.jl/src/Soli.jl:91.\n\n\n\n\n\n","category":"function"},{"location":"API/#Emerald.Soli.soil_ψ_25-Union{Tuple{FT}, Tuple{BrooksCorey{FT}, FT}} where FT<:AbstractFloat","page":"API","title":"Emerald.Soli.soil_ψ_25","text":"soil_ψ_25(vc::Union{BrooksCorey{FT}, VanGenuchten{FT}}, θ::FT) where {FT<:AbstractFloat}\n\nReturn the soil metric potential, given\n\nvc BrooksCorey or VanGenuchten type structure\nθ Soil volumetric water content (absolute value)\n\nExamples\n\nsoil_ψ_25(bc, FT(0.2))\nsoil_ψ_25(vg, FT(0.2))\n\n\n\n\n\n","category":"method"},{"location":"API/#Utilities","page":"API","title":"Utilities","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"calctav\nnanmean\ntransmittance","category":"page"},{"location":"API/#Emerald.calctav","page":"API","title":"Emerald.calctav","text":"calctav(α::FT, nr::FT) where {FT<:AbstractFloat}\n\nComputes transmission of isotropic radiation across an interface between two     dielectrics (Stern F., 1964; Allen W.A., 1973)). From calctav.m in     PROSPECT-D\n\nα angle of incidence\nnr Index of refraction\n\n\n\n\n\n","category":"function"},{"location":"API/#Emerald.nanmean","page":"API","title":"Emerald.nanmean","text":"nanmean(x::Array)\n\nReturn the mean of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\nExample\n\nxs = [1, 2, 4, NaN];\nnmean = nanmean(xs);\n\n\n\n\n\n","category":"function"},{"location":"API/#Emerald.transmittance","page":"API","title":"Emerald.transmittance","text":"transmittance(θ_in::FT, n::FT) where {FT <:AbstractFloat}\n\nTransmittance of S and P polarizations for a plane dielectric surface for light incident, given\n\nθ_i Incoming light angle\nn Relative index of refraction\n\n\n\n\n\n","category":"function"}]
}
